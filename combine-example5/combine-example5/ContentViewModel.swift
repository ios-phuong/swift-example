//
//  ContentViewModel.swift
//  combine-example5
//
//  Created by phuong.doan on 9/9/24.
//

import Foundation
import Combine

class ContentViewModel: ObservableObject {
    
    var subscriptions = Set<AnyCancellable>()
    
    init() {
        
    }
    
    func debounce() {
        let typingHelloWorld: [(TimeInterval, String)] = [
          (0.0, "H"),
          (0.1, "He"),
          (0.2, "Hel"),
          (0.3, "Hell"),
          (0.5, "Hello"),
          (0.6, "Hello "),
          (2.0, "Hello W"),
          (2.1, "Hello Wo"),
          (2.2, "Hello Wor"),
          (2.4, "Hello Worl"),
          (2.5, "Hello World")
        ]
        //subject
        let subject = PassthroughSubject<String, Never>()
        //debounce publisher
        let debounced = subject
            .debounce(for: .seconds(1.0), scheduler: DispatchQueue.main)
            .share()
        //subscription
        subject
            .sink { string in
                print("\(self.printDate()) - üîµ : \(string)")
            }
            .store(in: &subscriptions)
        debounced
            .sink { string in
                print("\(self.printDate()) - üî¥ : \(string)")
            }
            .store(in: &subscriptions)
        //loop
        let now = DispatchTime.now()
        for item in typingHelloWorld {
            DispatchQueue.main.asyncAfter(deadline: now + item.0) {
                subject.send(item.1)
            }
        }
    }
    
    func throttle() {
        
        let typingHelloWorld: [(TimeInterval, String)] = [
          (0.0, "H"),
          (0.1, "He"),
          (0.2, "Hel"),
          (0.3, "Hell"),
          (0.5, "Hello"),
          (0.6, "Hello_"),
          (2.0, "Hello W"),
          (2.1, "Hello Wo"),
          (2.2, "Hello Wor"),
          (2.4, "Hello Worl"),
          (2.5, "Hello World")
        ]
        
        //subject
        let subject = PassthroughSubject<String, Never>()
        
        //throttle publisher
        let throttle = subject
            .throttle(for: .seconds(1.0), scheduler: DispatchQueue.main, latest: true)
            .share()
        
        //subscription
        subject
            .sink { string in
                print("\(self.printDate()) - üîµ : \(string)")
            }
            .store(in: &subscriptions)
        
        throttle
            .sink { string in
                print("\(self.printDate()) - üî¥ : \(string)")
            }
            .store(in: &subscriptions)
        
        //loop
        let now = DispatchTime.now()
        for item in typingHelloWorld {
            DispatchQueue.main.asyncAfter(deadline: now + item.0) {
                subject.send(item.1)
            }
        }
    }
    
    func delay() {
        let valuesPerSecond = 1.0
        let delayInSeconds = 3.0
        let sourcePublisher = PassthroughSubject<Date, Never>()
        let delayedPublisher = sourcePublisher.delay(for: .seconds(delayInSeconds), scheduler: DispatchQueue.main)
        //subscription
        sourcePublisher
            .sink(receiveCompletion: { print("Source complete üîµ: ", $0) }) { print("Source üîµ: ", $0)}
            .store(in: &subscriptions)
        delayedPublisher
           .sink(receiveCompletion: { print("Delay complete üî¥: \($0) - \(Date()) ") }) { print("Delay üî¥: \($0) - \(Date()) ")}
           .store(in: &subscriptions)
        //emit values by timer
        DispatchQueue.main.async {
            Timer.scheduledTimer(withTimeInterval: valuesPerSecond, repeats: true) { _ in
                sourcePublisher.send(Date())
            }
        }
    }
    
//    func timeout() {
//        let subject = PassthroughSubject<Void, Never>()
//        
//        let timeoutSubject = subject.timeout(.seconds(5), scheduler: DispatchQueue.main)
//        
//        subject
//            .sink(receiveCompletion: { print("\(self.printDate()) - üîµ completion: ", $0) }) { print("\(self.printDate()) - üîµ : event")}
//            .store(in: &subscriptions)
//        
//        timeoutSubject
//            .sink(receiveCompletion: { print("\(self.printDate()) - üî¥ completion: ", $0) }) { print("\(self.printDate()) - üî¥ : event")}
//            .store(in: &subscriptions)
//        
//        print("\(printDate()) - BEGIN")
//        
//        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
//            subject.send()
//        }
//    }
    
    /**
     To√°n t·ª≠ n√†y r·∫•t chi l√† d·ªÖ hi·ªÉu, b·∫°n c·∫ßn set cho n√≥ 1 th·ªùi gian. N·∫øu qu√° th·ªùi gian ƒë√≥ m√† publisher g·ªëc kh√¥ng c√≥ ph√°t b·∫•t c·ª© g√¨ ra th√¨ publisher timeout s·∫Ω t·ª± ƒë·ªông k·∫øt th√∫c.
     C√≤n n·∫øu c√≥ gi√° tr·ªã g√¨ m·ªõi ƒë∆∞·ª£c ph√°t trong th·ªùi gian timeout th√¨ s·∫Ω t√≠nh l·∫°i t·ª´ ƒë·∫ßu.
     */
    func timeout() {
        let subject = PassthroughSubject<Void, Never>()
        
        subject
            .handleEvents(receiveOutput: { _ in print("\(self.printDate()) - üîµ : event") })
            .timeout(.seconds(5), scheduler: DispatchQueue.main)
            .sink(receiveCompletion: { completion in
                switch completion {
                case .finished:
                    print("\(self.printDate()) - üî¥ completion: finished")
                case .failure(let error):
                    print("\(self.printDate()) - üî¥ completion: \(error)")
                }
            }, receiveValue: { _ in })
            .store(in: &subscriptions)
        
        print("\(printDate()) - BEGIN")
        
        DispatchQueue.main.async {
            Timer.scheduledTimer(withTimeInterval: 2.0, repeats: true) { _ in
                subject.send()
            }
        }
    }
    
    func printDate() -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm:ss.S"
        return formatter.string(from: Date())
    }
}
